#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Face Registration Method Comparison Test
‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ‡∏ó‡∏µ‡∏•‡∏∞‡∏†‡∏≤‡∏û vs ‡∏°‡∏±‡∏î‡∏£‡∏ß‡∏°
‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
"""

import os
import json
import time
import base64
import requests
import numpy as np
from typing import Dict, List, Any, Tuple
import logging
from collections import defaultdict

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
API_BASE_URL = "http://localhost:8080"
TEST_IMAGES_DIR = "test_images"
OUTPUT_DIR = "output/registration_comparison"

# ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô 10 ‡∏£‡∏π‡∏õ
TEST_IMAGES = [
    "boss_01.jpg", "boss_02.jpg", "boss_03.jpg", "boss_04.jpg", "boss_05.jpg",
    "boss_06.jpg", "boss_07.jpg", "boss_08.jpg", "boss_09.jpg", "boss_10.jpg"
]

MODELS = ["facenet", "adaface", "arcface"]

def ensure_output_dir():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    logger.info(f"Output directory: {OUTPUT_DIR}")

def image_to_base64(image_path: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô base64"""
    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode('utf-8')

def clear_database():
    """‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ endpoint)"""
    try:
        # ‡πÉ‡∏ä‡πâ get gallery ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ person
        gallery_response = requests.get(f"{API_BASE_URL}/api/face-recognition/get-gallery", timeout=30)
        if gallery_response.status_code == 200:
            gallery = gallery_response.json()
            logger.info(f"üìã Current gallery has {len(gallery)} persons")
            # Note: ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ clear endpoint ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Cannot clear database: {e}")
        return True

def test_individual_registration(person_id: str, images: List[str], model_name: str) -> Dict[str, Any]:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏†‡∏≤‡∏û"""
    logger.info(f"  üìù Individual Registration - {model_name}")
    
    results = {
        "method": "individual",
        "model_name": model_name,
        "person_id": person_id,
        "total_images": len(images),
        "registration_results": [],
        "registration_success_rate": 0.0,
        "total_time": 0.0,
        "average_time_per_image": 0.0
    }
    
    start_time = time.time()
    successful_registrations = 0
    
    for i, image_file in enumerate(images, 1):
        image_path = os.path.join(TEST_IMAGES_DIR, image_file)
        if not os.path.exists(image_path):
            logger.error(f"‚ùå Image not found: {image_file}")
            continue
            
        logger.info(f"    [{i}/{len(images)}] Registering: {image_file}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
        image_base64 = image_to_base64(image_path)
        
        # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        reg_start = time.time()
        success = add_single_face(image_base64, person_id, f"Person {person_id}", model_name)
        reg_time = time.time() - reg_start
        
        reg_result = {
            "image_file": image_file,
            "success": success,
            "time": reg_time
        }
        results["registration_results"].append(reg_result)
        
        if success:
            successful_registrations += 1
            logger.info(f"      ‚úÖ Success ({reg_time:.2f}s)")
        else:
            logger.error(f"      ‚ùå Failed ({reg_time:.2f}s)")
    
    total_time = time.time() - start_time
    results["total_time"] = total_time
    results["registration_success_rate"] = (successful_registrations / len(images)) * 100
    results["average_time_per_image"] = total_time / len(images)
    
    logger.info(f"  üìä Individual Results: {successful_registrations}/{len(images)} success, {total_time:.2f}s total")
    
    return results

def test_batch_registration(person_id: str, images: List[str], model_name: str) -> Dict[str, Any]:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏±‡∏î‡∏£‡∏ß‡∏°"""
    logger.info(f"  üì¶ Batch Registration - {model_name}")
    
    results = {
        "method": "batch",
        "model_name": model_name,
        "person_id": person_id,
        "total_images": len(images),
        "registration_results": [],
        "registration_success_rate": 0.0,
        "total_time": 0.0,
        "average_time_per_image": 0.0
    }
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    batch_data = []
    for image_file in images:
        image_path = os.path.join(TEST_IMAGES_DIR, image_file)
        if os.path.exists(image_path):
            image_base64 = image_to_base64(image_path)
            batch_data.append({
                "image_file": image_file,
                "image_base64": image_base64
            })
    
    if not batch_data:
        logger.error("‚ùå No valid images for batch registration")
        return results
    
    start_time = time.time()
    
    # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö batch (‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
    success_count = 0
    for i, item in enumerate(batch_data, 1):
        logger.info(f"    [{i}/{len(batch_data)}] Batch processing: {item['image_file']}")
        
        reg_start = time.time()
        success = add_single_face(item['image_base64'], person_id, f"Person {person_id}", model_name)
        reg_time = time.time() - reg_start
        
        reg_result = {
            "image_file": item['image_file'],
            "success": success,
            "time": reg_time
        }
        results["registration_results"].append(reg_result)
        
        if success:
            success_count += 1
            logger.info(f"      ‚úÖ Success ({reg_time:.2f}s)")
        else:
            logger.error(f"      ‚ùå Failed ({reg_time:.2f}s)")
    
    total_time = time.time() - start_time
    results["total_time"] = total_time
    results["registration_success_rate"] = (success_count / len(batch_data)) * 100
    results["average_time_per_image"] = total_time / len(batch_data)
    
    logger.info(f"  üìä Batch Results: {success_count}/{len(batch_data)} success, {total_time:.2f}s total")
    
    return results

def add_single_face(image_base64: str, person_id: str, person_name: str, model_name: str) -> bool:
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    url = f"{API_BASE_URL}/api/face-recognition/add-face-json"
    
    data = {
        "person_id": person_id,
        "person_name": person_name,
        "face_image_base64": image_base64,
        "model_name": model_name
    }
    
    try:
        response = requests.post(url, json=data, timeout=120)
        if response.status_code == 200:
            result = response.json()
            return result.get('success', False)
        else:
            logger.error(f"‚ùå Registration failed: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Registration exception: {e}")
        return False

def test_recognition_accuracy(person_id: str, test_images: List[str], model_name: str) -> Dict[str, Any]:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥"""
    logger.info(f"  üéØ Testing Recognition Accuracy - {model_name}")
    
    results = {
        "model_name": model_name,
        "person_id": person_id,
        "test_results": [],
        "accuracy": 0.0,
        "average_similarity": 0.0,
        "total_test_time": 0.0
    }
    
    start_time = time.time()
    correct_recognitions = 0
    similarity_scores = []
    
    for i, image_file in enumerate(test_images, 1):
        image_path = os.path.join(TEST_IMAGES_DIR, image_file)
        if not os.path.exists(image_path):
            continue
            
        logger.info(f"    [{i}/{len(test_images)}] Testing: {image_file}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
        image_base64 = image_to_base64(image_path)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
        recognition_result = recognize_face(image_base64, model_name)
        
        test_result = {
            "image_file": image_file,
            "recognition_success": False,
            "similarity": 0.0,
            "recognized_person": "",
            "is_correct": False
        }
        
        if recognition_result and 'matches' in recognition_result:
            matches = recognition_result['matches']
            if matches:
                best_match = matches[0]
                similarity = best_match.get('similarity', 0.0)
                recognized_id = best_match.get('person_id', '')
                
                test_result["recognition_success"] = True
                test_result["similarity"] = similarity
                test_result["recognized_person"] = recognized_id
                test_result["is_correct"] = (recognized_id == person_id)
                
                if test_result["is_correct"]:
                    correct_recognitions += 1
                
                similarity_scores.append(similarity)
                logger.info(f"      ‚úÖ Recognized: {recognized_id} (similarity: {similarity:.4f})")
            else:
                logger.warning(f"      ‚ö†Ô∏è No matches found")
        else:
            logger.error(f"      ‚ùå Recognition failed")
        
        results["test_results"].append(test_result)
    
    total_time = time.time() - start_time
    results["total_test_time"] = total_time
    results["accuracy"] = (correct_recognitions / len(test_images)) * 100 if test_images else 0
    results["average_similarity"] = np.mean(similarity_scores) if similarity_scores else 0
    
    logger.info(f"  üìä Recognition Results: {correct_recognitions}/{len(test_images)} correct, {results['accuracy']:.1f}% accuracy")
    
    return results

def recognize_face(image_base64: str, model_name: str) -> Dict[str, Any]:
    """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤"""
    # ‡∏î‡∏∂‡∏á gallery ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    try:
        gallery_response = requests.get(f"{API_BASE_URL}/api/face-recognition/get-gallery", timeout=30)
        if gallery_response.status_code == 200:
            gallery = gallery_response.json()
        else:
            return {}
    except Exception:
        return {}
    
    if not gallery:
        return {"matches": []}
    
    url = f"{API_BASE_URL}/api/face-recognition/recognize"
    
    data = {
        "face_image_base64": image_base64,
        "gallery": gallery,
        "model_name": model_name,
        "top_k": 5,
        "similarity_threshold": 0.3
    }
    
    try:
        response = requests.post(url, json=data, timeout=60)
        if response.status_code == 200:
            return response.json()
        else:
            return {}
    except Exception:
        return {}

def run_comparison_test():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"""
    logger.info("üî¨ Face Registration Method Comparison Test")
    logger.info("=" * 60)
    
    ensure_output_dir()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if response.status_code != 200:
            logger.error("‚ùå API server not ready")
            return
        logger.info("‚úÖ API server is ready")
    except Exception as e:
        logger.error(f"‚ùå Cannot connect to API: {e}")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    available_images = []
    for img in TEST_IMAGES:
        if os.path.exists(os.path.join(TEST_IMAGES_DIR, img)):
            available_images.append(img)
    
    if len(available_images) < 5:
        logger.error(f"‚ùå Need at least 5 images, found {len(available_images)}")
        return
    
    logger.info(f"üìÅ Found {len(available_images)} test images")
    
    # ‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏π‡∏õ: 70% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö registration, 30% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing
    split_point = int(len(available_images) * 0.7)
    registration_images = available_images[:split_point]
    test_images = available_images[split_point:]
    
    logger.info(f"üìù Registration images: {len(registration_images)}")
    logger.info(f"üéØ Test images: {len(test_images)}")
    
    all_results = {}
    
    for model_name in MODELS:
        logger.info(f"\nüß† Testing model: {model_name}")
        logger.info("-" * 50)
        
        model_results = {
            "model_name": model_name,
            "individual_registration": {},
            "batch_registration": {},
            "individual_recognition": {},
            "batch_recognition": {}
        }
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        clear_database()
        
        # Test 1: Individual Registration + Recognition
        logger.info(f"üîÑ Test 1: Individual Registration")
        individual_reg = test_individual_registration("person_individual", registration_images, model_name)
        model_results["individual_registration"] = individual_reg
        
        individual_rec = test_recognition_accuracy("person_individual", test_images, model_name)
        model_results["individual_recognition"] = individual_rec
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        time.sleep(5)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        clear_database()
        
        # Test 2: Batch Registration + Recognition
        logger.info(f"üîÑ Test 2: Batch Registration")
        batch_reg = test_batch_registration("person_batch", registration_images, model_name)
        model_results["batch_registration"] = batch_reg
        
        batch_rec = test_recognition_accuracy("person_batch", test_images, model_name)
        model_results["batch_recognition"] = batch_rec
        
        all_results[model_name] = model_results
        
        # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        time.sleep(10)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    generate_comparison_report(all_results)
    
    logger.info("üéâ Comparison test completed!")

def generate_comparison_report(results: Dict[str, Any]):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"""
    report = {
        "test_timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
        "comparison_results": results,
        "summary": {}
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    summary = {}
    
    for model_name, model_data in results.items():
        individual_reg = model_data["individual_registration"]
        batch_reg = model_data["batch_registration"]
        individual_rec = model_data["individual_recognition"]
        batch_rec = model_data["batch_recognition"]
        
        summary[model_name] = {
            "registration_comparison": {
                "individual_success_rate": individual_reg.get("registration_success_rate", 0),
                "batch_success_rate": batch_reg.get("registration_success_rate", 0),
                "individual_total_time": individual_reg.get("total_time", 0),
                "batch_total_time": batch_reg.get("total_time", 0),
                "individual_avg_time": individual_reg.get("average_time_per_image", 0),
                "batch_avg_time": batch_reg.get("average_time_per_image", 0)
            },
            "recognition_comparison": {
                "individual_accuracy": individual_rec.get("accuracy", 0),
                "batch_accuracy": batch_rec.get("accuracy", 0),
                "individual_avg_similarity": individual_rec.get("average_similarity", 0),
                "batch_avg_similarity": batch_rec.get("average_similarity", 0)
            }
        }
    
    report["summary"] = summary
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    report_file = os.path.join(OUTPUT_DIR, "registration_comparison_report.json")
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
    print_comparison_summary(summary)
    
    logger.info(f"üìÑ Detailed report saved: {report_file}")

def print_comparison_summary(summary: Dict[str, Any]):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"""
    print("\n" + "="*80)
    print("üìä FACE REGISTRATION METHOD COMPARISON RESULTS")
    print("="*80)
    print(f"üìÖ Test Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üß† Models Tested: {', '.join(summary.keys())}")
    print("-"*80)
    
    for model_name, model_summary in summary.items():
        print(f"\nüî¨ {model_name.upper()} Model Results:")
        
        reg_comp = model_summary["registration_comparison"]
        rec_comp = model_summary["recognition_comparison"]
        
        print(f"  üìù Registration Performance:")
        print(f"     Individual: {reg_comp['individual_success_rate']:.1f}% success, {reg_comp['individual_total_time']:.1f}s total")
        print(f"     Batch:      {reg_comp['batch_success_rate']:.1f}% success, {reg_comp['batch_total_time']:.1f}s total")
        print(f"     Time per image: Individual {reg_comp['individual_avg_time']:.2f}s vs Batch {reg_comp['batch_avg_time']:.2f}s")
        
        print(f"  üéØ Recognition Accuracy:")
        print(f"     Individual: {rec_comp['individual_accuracy']:.1f}% accuracy, {rec_comp['individual_avg_similarity']:.4f} avg similarity")
        print(f"     Batch:      {rec_comp['batch_accuracy']:.1f}% accuracy, {rec_comp['batch_avg_similarity']:.4f} avg similarity")
        
        # Winner analysis
        reg_winner = "Individual" if reg_comp['individual_success_rate'] > reg_comp['batch_success_rate'] else "Batch"
        if reg_comp['individual_success_rate'] == reg_comp['batch_success_rate']:
            reg_winner = "Individual" if reg_comp['individual_total_time'] < reg_comp['batch_total_time'] else "Batch"
        
        rec_winner = "Individual" if rec_comp['individual_accuracy'] > rec_comp['batch_accuracy'] else "Batch"
        if rec_comp['individual_accuracy'] == rec_comp['batch_accuracy']:
            rec_winner = "Individual" if rec_comp['individual_avg_similarity'] > rec_comp['batch_avg_similarity'] else "Batch"
        
        print(f"  üèÜ Winner: Registration={reg_winner}, Recognition={rec_winner}")

if __name__ == "__main__":
    run_comparison_test()
