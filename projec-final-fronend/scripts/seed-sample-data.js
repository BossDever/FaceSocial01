const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createSampleData() {
  try {
    console.log('üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const users = [];
    
    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å (admin01 ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    const existingAdmin = await prisma.user.findUnique({
      where: { username: 'admin01' }
    });

    if (existingAdmin) {
      users.push(existingAdmin);
      console.log('‚úÖ ‡πÉ‡∏ä‡πâ admin01 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const sampleUsers = [
      {
        username: 'john_doe',
        email: 'john@example.com',
        firstName: 'John',
        lastName: 'Doe',
        passwordHash: await bcrypt.hash('password123', 10)
      },
      {
        username: 'jane_smith',
        email: 'jane@example.com',
        firstName: 'Jane',
        lastName: 'Smith',
        passwordHash: await bcrypt.hash('password123', 10)
      },
      {
        username: 'bob_wilson',
        email: 'bob@example.com',
        firstName: 'Bob',
        lastName: 'Wilson',
        passwordHash: await bcrypt.hash('password123', 10)
      },
      {
        username: 'alice_brown',
        email: 'alice@example.com',
        firstName: 'Alice',
        lastName: 'Brown',
        passwordHash: await bcrypt.hash('password123', 10)
      }
    ];

    for (const userData of sampleUsers) {
      const existingUser = await prisma.user.findUnique({
        where: { username: userData.username }
      });

      if (!existingUser) {
        const user = await prisma.user.create({
          data: userData
        });
        users.push(user);
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}`);
      } else {
        users.push(existingUser);
        console.log(`‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.username} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    console.log('üë• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô...');
    
    const friendships = [
      { userId: users[0].id, friendId: users[1].id, status: 'ACCEPTED' },
      { userId: users[0].id, friendId: users[2].id, status: 'ACCEPTED' },
      { userId: users[1].id, friendId: users[2].id, status: 'PENDING' },
      { userId: users[2].id, friendId: users[3].id, status: 'ACCEPTED' }
    ];

    for (const friendship of friendships) {
      const existing = await prisma.friendship.findFirst({
        where: {
          OR: [
            { userId: friendship.userId, friendId: friendship.friendId },
            { userId: friendship.friendId, friendId: friendship.userId }
          ]
        }
      });

      if (!existing) {
        await prisma.friendship.create({
          data: friendship
        });
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û: ${friendship.userId} <-> ${friendship.friendId}`);
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    console.log('üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
    
    const samplePosts = [
      {
        userId: users[0].id,
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÉ‡∏ô FaceSocial üéâ',
        isPublic: true
      },
      {
        userId: users[1].id,
        content: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô ‚òÄÔ∏è',
        isPublic: true
      },
      {
        userId: users[2].id,
        content: '‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å! ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üçú',
        location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
        isPublic: true
      },
      {
        userId: users[3].id,
        content: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á ‡πÉ‡∏Ñ‡∏£‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üíª',
        isPublic: true
      }
    ];

    const createdPosts = [];
    for (const postData of samplePosts) {
      const post = await prisma.post.create({
        data: postData
      });
      createdPosts.push(post);
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå: ${post.content.substring(0, 30)}...`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏•‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    console.log('‚ù§Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏•‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå...');
    
    // ‡πÑ‡∏•‡∏Ñ‡πå
    const likes = [
      { userId: users[1].id, postId: createdPosts[0].id },
      { userId: users[2].id, postId: createdPosts[0].id },
      { userId: users[0].id, postId: createdPosts[1].id },
      { userId: users[3].id, postId: createdPosts[2].id }
    ];

    for (const like of likes) {
      const existing = await prisma.like.findUnique({
        where: {
          userId_postId: {
            userId: like.userId,
            postId: like.postId
          }
        }
      });

      if (!existing) {
        await prisma.like.create({
          data: like
        });
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏•‡∏Ñ‡πå`);
      }
    }

    // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    const comments = [
      {
        userId: users[1].id,
        postId: createdPosts[0].id,
        content: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö! üéä'
      },
      {
        userId: users[2].id,
        postId: createdPosts[1].id,
        content: '‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢!'
      },
      {
        userId: users[0].id,
        postId: createdPosts[2].id,
        content: '‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô'
      }
    ];

    for (const comment of comments) {
      await prisma.comment.create({
        data: comment
      });
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    console.log('üîî ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô...');
    
    const notifications = [
      {
        userId: users[0].id,
        senderId: users[1].id,
        type: 'POST_LIKE',
        title: '‡∏°‡∏µ‡∏Ñ‡∏ô‡πÑ‡∏•‡∏Ñ‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        message: '‡πÑ‡∏•‡∏Ñ‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        data: { postId: createdPosts[0].id }
      },
      {
        userId: users[1].id,
        senderId: users[2].id,
        type: 'FRIEND_REQUEST',
        title: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
        message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì',
        data: { friendshipId: 'sample-id' }
      }
    ];

    for (const notification of notifications) {
      await prisma.notification.create({
        data: notification
      });
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${notification.title}`);
    }

    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ:`);
    console.log(`   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${users.length} ‡∏Ñ‡∏ô`);
    console.log(`   - ‡πÇ‡∏û‡∏™‡∏ï‡πå: ${createdPosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
    console.log(`   - ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${notifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createSampleData();
