import React, { useRef, useEffect, useState, useCallback } from 'react';
import { Modal, Button, Space, Alert, Card, Typography, Badge } from 'antd';
import { 
  CameraOutlined, 
  StopOutlined, 
  SafetyOutlined,
  LoadingOutlined,
  WarningOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined
} from '@ant-design/icons';

const { Text } = Typography;

interface RealTimeAntiSpoofingProps {
  visible: boolean;
  onClose: () => void;
}

interface SpoofingResult {
  face_id: number;
  is_real: boolean;
  confidence: number;
  spoofing_detected: boolean;
  region: {
    x: number;
    y: number;
    w: number;
    h: number;
  };
}

const RealTimeAntiSpoofing: React.FC<RealTimeAntiSpoofingProps> = ({ 
  visible, 
  onClose 
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const [isStreaming, setIsStreaming] = useState(false);
  const [isDetecting, setIsDetecting] = useState(false);
  const [results, setResults] = useState<SpoofingResult[]>([]);
  const [overallResult, setOverallResult] = useState<{
    is_real: boolean;
    confidence: number;
    spoofing_detected: boolean;
    real_faces: number;
    fake_faces: number;
  } | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [fps, setFps] = useState(0);
  const [detectionCount, setDetectionCount] = useState(0);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const startCamera = useCallback(async () => {
    try {
      setError(null);
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: 'user'
        }
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        setIsStreaming(true);
      }
    } catch (err) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï');
      console.error('Camera access error:', err);
    }
  }, []);

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    setIsStreaming(false);
    setIsDetecting(false);
    setResults([]);
    setOverallResult(null);
  }, []);
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Canvas
  const cropFaceFromCanvas = useCallback(async (sourceCanvas: HTMLCanvasElement, bbox: { x1: number; y1: number; x2: number; y2: number }): Promise<Blob> => {
    return new Promise((resolve, reject) => {
      const tempCanvas = document.createElement('canvas');
      const tempCtx = tempCanvas.getContext('2d');
      
      if (!tempCtx) {
        reject(new Error('Cannot create canvas context'));
        return;
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤)
      const padding = 0.2; // ‡πÄ‡∏û‡∏¥‡πà‡∏° 20% ‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      const faceWidth = bbox.x2 - bbox.x1;
      const faceHeight = bbox.y2 - bbox.y1;
      const paddingX = faceWidth * padding;
      const paddingY = faceHeight * padding;
      
      const cropX = Math.max(0, bbox.x1 - paddingX);
      const cropY = Math.max(0, bbox.y1 - paddingY);
      const cropWidth = Math.min(sourceCanvas.width - cropX, faceWidth + (paddingX * 2));
      const cropHeight = Math.min(sourceCanvas.height - cropY, faceHeight + (paddingY * 2));
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas
      tempCanvas.width = cropWidth;
      tempCanvas.height = cropHeight;
      
      // ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏°‡∏≤‡∏•‡∏á‡πÉ‡∏ô Canvas
      tempCtx.drawImage(
        sourceCanvas,
        cropX, cropY, cropWidth, cropHeight, // source
        0, 0, cropWidth, cropHeight // destination
      );
      
      // ‡πÅ‡∏õ‡∏•‡∏á Canvas ‡πÄ‡∏õ‡πá‡∏ô Blob
      tempCanvas.toBlob((blob) => {
        if (blob) {
          resolve(blob);
        } else {
          reject(new Error('Failed to create cropped image blob'));
        }
      }, 'image/jpeg', 0.9);
    });
  }, []);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å video frame (‡πÉ‡∏ä‡πâ Face Detection ‡∏Å‡πà‡∏≠‡∏ô)
  const detectSpoofing = useCallback(async () => {
    if (!videoRef.current || !canvasRef.current || !isStreaming) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    // ‡∏ß‡∏≤‡∏î video frame ‡∏•‡∏á canvas
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0);

    try {
      canvas.toBlob(async (blob) => {
        if (!blob) return;

        try {
          // Step 1: ‡∏£‡∏±‡∏ô Face Detection ‡∏Å‡πà‡∏≠‡∏ô
          const faceFormData = new FormData();
          faceFormData.append('file', blob, 'frame.jpg');
          faceFormData.append('model_name', 'yolov11m');
          faceFormData.append('conf_threshold', '0.5');

          const faceResponse = await fetch('http://localhost:8080/api/face-detection/detect', {
            method: 'POST',
            body: faceFormData
          });

          if (!faceResponse.ok) {
            console.error('Face detection failed');
            return;
          }

          const faceResult = await faceResponse.json();
          const faces = faceResult.faces || [];

          if (faces.length === 0) {
            setResults([]);
            setOverallResult(null);
            return;
          }

          console.log(`üéØ ‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ${faces.length} ‡∏´‡∏ô‡πâ‡∏≤ (Real-time)`);

          // Step 2: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Anti-Spoofing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
          const antispoofingResults = [];

          for (let i = 0; i < faces.length; i++) {
            const face = faces[i];
            
            try {
              // ‡∏ï‡∏±‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å canvas
              const croppedBlob = await cropFaceFromCanvas(canvas, face.bbox);
              
              // ‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Anti-Spoofing
              const spoofFormData = new FormData();
              spoofFormData.append('image', croppedBlob, `face_${i}.jpg`);
              spoofFormData.append('confidence_threshold', '0.5');

              const spoofResponse = await fetch('http://localhost:8080/api/anti-spoofing/detect-upload', {
                method: 'POST',
                body: spoofFormData
              });

              if (spoofResponse.ok) {
                const spoofResult = await spoofResponse.json();
                
                // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Face Detection ‡πÅ‡∏•‡∏∞ Anti-Spoofing
                const combinedResult = {
                  face_id: i + 1,
                  is_real: spoofResult.overall_result?.is_real || false,
                  confidence: spoofResult.overall_result?.confidence || 0,
                  spoofing_detected: spoofResult.overall_result?.spoofing_detected || false,
                  region: {
                    x: face.bbox.x1,
                    y: face.bbox.y1,
                    w: face.bbox.x2 - face.bbox.x1,
                    h: face.bbox.y2 - face.bbox.y1
                  }
                };

                antispoofingResults.push(combinedResult);
              }
            } catch (error) {
              console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ${i + 1}:`, error);
            }
          }

          if (antispoofingResults.length > 0) {
            setResults(antispoofingResults);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á overall result
            const realFaces = antispoofingResults.filter(r => r.is_real).length;
            const fakeFaces = antispoofingResults.length - realFaces;
            
            setOverallResult({
              is_real: realFaces > fakeFaces,
              confidence: antispoofingResults.reduce((sum, r) => sum + r.confidence, 0) / antispoofingResults.length,
              spoofing_detected: fakeFaces > 0,
              real_faces: realFaces,
              fake_faces: fakeFaces
            });
            
            setDetectionCount(prev => prev + 1);
          } else {
            setResults([]);
            setOverallResult(null);
          }

        } catch (error) {
          console.error('Real-time detection error:', error);
        }
      }, 'image/jpeg', 0.8);
    } catch (error) {
      console.error('Canvas processing error:', error);
    }
  }, [isStreaming, cropFaceFromCanvas]);
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î real-time detection
  const toggleDetection = useCallback(() => {
    if (isDetecting) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      setIsDetecting(false);
      setResults([]);
      setOverallResult(null);
      setFps(0);
    } else {
      setIsDetecting(true);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
      let frameCount = 0;
      const startTime = Date.now();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 500ms (2 FPS) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ anti-spoofing ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤
      intervalRef.current = setInterval(() => {
        detectSpoofing();
        frameCount++;
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó FPS ‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const elapsed = (Date.now() - startTime) / 1000;
        if (elapsed >= 2) {
          setFps(Math.round(frameCount / elapsed * 10) / 10); // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        }
      }, 500);
    }
  }, [isDetecting, detectSpoofing]);// ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏ô canvas (‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å Face Detection)
  const drawResults = useCallback(() => {
    if (!canvasRef.current || !videoRef.current) return;

    const canvas = canvasRef.current;
    const video = videoRef.current;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    // ‡∏ß‡∏≤‡∏î video frame
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    // ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å Face Detection)
    results.forEach((result) => {
      const { x, y, w, h } = result.region;
      const isReal = result.is_real;
      const confidence = result.confidence;
      
      // ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á, ‡πÅ‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏õ‡∏•‡∏≠‡∏°
      ctx.strokeStyle = isReal ? '#00ff00' : '#ff0000';
      ctx.lineWidth = 4;
      ctx.strokeRect(x, y, w, h);
      
      // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const bgColor = isReal ? 'rgba(0, 255, 0, 0.9)' : 'rgba(255, 0, 0, 0.9)';
      ctx.fillStyle = bgColor;
      const textY = y > 40 ? y - 40 : y + h + 5;
      ctx.fillRect(x, textY, 220, 35);
      
      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 16px Arial';
      const status = isReal ? 'REAL FACE ‚úì' : 'FAKE/SPOOF ‚ö†Ô∏è';
      ctx.fillText(`${status}`, x + 5, textY + 22);
      
      ctx.font = 'bold 12px Arial';
      ctx.fillText(`${(confidence * 100).toFixed(1)}%`, x + 5, textY + 35);
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°
    if (overallResult) {
      const status = overallResult.is_real ? 'REAL PERSON' : 'SPOOFING DETECTED';
      const color = overallResult.is_real ? 'rgba(0, 255, 0, 0.9)' : 'rgba(255, 0, 0, 0.9)';
      
      ctx.fillStyle = color;
      ctx.fillRect(10, 10, 250, 40);
      
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 16px Arial';
      ctx.fillText(status, 15, 35);
    }
  }, [results, overallResult]);

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó canvas ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  useEffect(() => {
    if (isDetecting) {
      const animationFrame = requestAnimationFrame(drawResults);
      return () => cancelAnimationFrame(animationFrame);
    }
  }, [isDetecting, results, overallResult, drawResults]);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal
  useEffect(() => {
    if (visible) {
      startCamera();
    } else {
      stopCamera();
    }

    return () => {
      stopCamera();
    };
  }, [visible, startCamera, stopCamera]);

  return (
    <Modal
      title={
        <Space>
          <SafetyOutlined />
          Real-time Anti-Spoofing Detection
          {isDetecting && <Badge status="processing" text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..." />}
        </Space>
      }
      open={visible}
      onCancel={onClose}
      width={800}
      footer={[
        <Button key="close" onClick={onClose}>
          ‡∏õ‡∏¥‡∏î
        </Button>
      ]}
      destroyOnHidden
    >
      <div className="space-y-4">
        {error && (
          <Alert
            message="‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
            description={error}
            type="error"
            icon={<WarningOutlined />}
            showIcon
          />
        )}

        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
        <Card size="small">
          <Space wrap>
            <Button
              type={isStreaming ? "default" : "primary"}
              icon={<CameraOutlined />}
              onClick={startCamera}
              disabled={isStreaming}
            >
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
            </Button>

            <Button
              type="default"
              icon={<StopOutlined />}
              onClick={stopCamera}
              disabled={!isStreaming}
            >
              ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            </Button>

            <Button
              type={isDetecting ? "default" : "primary"}
              danger={isDetecting}
              icon={isDetecting ? <LoadingOutlined spin /> : <SafetyOutlined />}
              onClick={toggleDetection}
              disabled={!isStreaming}
            >
              {isDetecting ? '‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á'}
            </Button>
          </Space>
        </Card>

        {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
        {isDetecting && (
          <Card size="small">
            <Space split={<span>|</span>} wrap>
              <Text>
                <strong>FPS:</strong> {fps}
              </Text>
              <Text>
                <strong>‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:</strong> {results.length}
              </Text>
              <Text>
                <strong>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {detectionCount}
              </Text>
              {overallResult && (
                <Text style={{ color: overallResult.is_real ? '#52c41a' : '#ff4d4f' }}>
                  <strong>
                    {overallResult.is_real ? 
                      <><CheckCircleOutlined /> REAL PERSON</> : 
                      <><CloseCircleOutlined /> SPOOFING DETECTED</>
                    }
                  </strong>
                </Text>
              )}
            </Space>
          </Card>
        )}

        {/* Video ‡πÅ‡∏•‡∏∞ Canvas */}
        <div className="relative bg-black rounded-lg overflow-hidden">
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            className="w-full h-auto"
            style={{ maxHeight: '400px' }}
          />
          
          <canvas
            ref={canvasRef}
            className="absolute top-0 left-0 w-full h-full"
            style={{ 
              display: isDetecting ? 'block' : 'none',
              maxHeight: '400px'
            }}
          />
        </div>

        {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
        <Alert
          message="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
          description="1. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á 2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏õ‡∏•‡∏≠‡∏°"
          type="info"
          showIcon
        />
      </div>
    </Modal>
  );
};

export default RealTimeAntiSpoofing;
