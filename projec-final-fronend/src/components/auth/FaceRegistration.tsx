'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { 
  Button, 
  Card, 
  Alert, 
  Progress, 
  Typography, 
  Space,
  Spin,
  Modal,
  Row,
  Col,
  Statistic,
  Badge
} from 'antd';
import { 
  CameraOutlined, 
  CheckCircleOutlined, 
  ExclamationCircleOutlined,
  InfoCircleOutlined
} from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;

interface FaceRegistrationProps {
  onComplete: (faceData: {
    embedding: number[];
    imageUrl: string;
    qualityScore: number;
    confidence: number;
    totalImages?: number;
    userInfo?: {
      firstName: string;
      lastName: string;
      userId: string;
    };
  }) => void;
  onError: (error: string) => void;
  onBack?: () => void; // ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  userInfo?: {
    firstName: string;
    lastName: string;
    userId?: string;
  };
  loading?: boolean; // ‡∏£‡∏±‡∏ö loading state ‡∏à‡∏≤‡∏Å parent
  onLoadingChange?: (loading: boolean) => void; // callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô loading state
}

const FaceRegistration: React.FC<FaceRegistrationProps> = ({
  onComplete,
  onError,
  onBack,
  userInfo,
  loading: externalLoading = false,
  onLoadingChange
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  
  // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏° refs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
  const isProcessingRef = useRef(false);
  const initializingRef = useRef(false);
  const detectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const completionTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const registrationTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const hasCompletedRef = useRef(false);

  const [isStreaming, setIsStreaming] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [capturedImages, setCapturedImages] = useState<string[]>([]);
  const [faceDetected, setFaceDetected] = useState(false);
  const [faceQuality, setFaceQuality] = useState(0);
  const [isRealFace, setIsRealFace] = useState(false);
  const [step, setStep] = useState<'setup' | 'detecting' | 'captured' | 'processing' | 'registering' | 'completed'>('setup');
  const [detectionProgress, setDetectionProgress] = useState(0);
  const [registrationProgress, setRegistrationProgress] = useState(0);
  const [imageCount, setImageCount] = useState(0);
  const [showGuide, setShowGuide] = useState(false);
  const [showCameraModal, setShowCameraModal] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const TARGET_IMAGES = 15;

  console.log('FaceRegistration render - step:', step, 'isStreaming:', isStreaming, 'processing:', isProcessingRef.current);

  // Update external loading state
  useEffect(() => {
    if (onLoadingChange) {
      onLoadingChange(isProcessing || externalLoading);
    }
  }, [isProcessing, externalLoading, onLoadingChange]);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á cleanup function
  const cleanupTimeouts = useCallback(() => {
    if (detectionIntervalRef.current) {
      clearInterval(detectionIntervalRef.current);
      detectionIntervalRef.current = null;
    }
    if (completionTimeoutRef.current) {
      clearTimeout(completionTimeoutRef.current);
      completionTimeoutRef.current = null;
    }
    if (registrationTimeoutRef.current) {
      clearTimeout(registrationTimeoutRef.current);
      registrationTimeoutRef.current = null;
    }
  }, []);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á stop camera function
  const stopCamera = useCallback(() => {
    console.log('üõë Stopping camera...');
    cleanupTimeouts();
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    setIsStreaming(false);
    setFaceDetected(false);
    setFaceQuality(0);
    setDetectionProgress(0);
  }, [cleanupTimeouts]);

  // Initialize camera
  const initCamera = useCallback(async () => {
    if (initializingRef.current) {
      console.log('üö´ Camera initialization already in progress');
      return;
    }
    initializingRef.current = true;

    try {
      console.log('üì∑ Starting camera initialization...');
      setError(null);
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: 'user'
        }
      });
      
      console.log('‚úÖ Camera stream obtained successfully');
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        setIsStreaming(true);
        console.log('‚úÖ Video stream assigned and ready');
      }
    } catch (err) {
      console.error('‚ùå Error accessing camera:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á');
      onError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    } finally {
      initializingRef.current = false;
    }
  }, [onError]);

  // Start camera modal
  const startCameraModal = useCallback(() => {
    console.log('üé¨ Starting camera modal');
    setShowCameraModal(true);
    setStep('detecting');
  }, []);

  // Close camera modal
  const closeCameraModal = useCallback(() => {
    console.log('üö™ Closing camera modal');
    stopCamera();
    setShowCameraModal(false);
    setStep('setup');
    // Reset states
    setCapturedImages([]);
    setImageCount(0);
    hasCompletedRef.current = false;
    isProcessingRef.current = false;
  }, [stopCamera]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test API connectivity
  const testAPIConnectivity = useCallback(async () => {
    try {
      console.log('üîç Testing API connectivity...');
      
      // Test 1: Health check
      const healthResponse = await fetch('http://localhost:8080/api/face-recognition/health');
      console.log('üîç Health check:', healthResponse.ok ? '‚úÖ' : '‚ùå');
      
      return healthResponse.ok;
    } catch (error) {
      console.error('‚ùå API connectivity test failed:', error);
      return false;
    }
  }, []);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á processRegistration ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
  const processRegistration = useCallback(async () => {
    const callId = `process_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    console.log(`üîÑ [${callId}] processRegistration called`);
    
    // Test API connectivity ‡∏Å‡πà‡∏≠‡∏ô
    const apiConnected = await testAPIConnectivity();
    if (!apiConnected) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Face Recognition API ‡πÑ‡∏î‡πâ');
      onError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Face Recognition API ‡πÑ‡∏î‡πâ');
      return;
    }
    
    if (isProcessingRef.current) {
      console.warn(`üö´ [${callId}] Registration already in progress, ignoring duplicate call`);
      return;
    }

    if (hasCompletedRef.current) {
      console.warn(`üö´ [${callId}] Registration already completed, ignoring duplicate call`);
      return;
    }

    // üîß ‡∏ï‡∏±‡πâ‡∏á flags ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    isProcessingRef.current = true;
    hasCompletedRef.current = true;
    console.log(`üîí [${callId}] Marked as processing and completed`);

    try {
      setIsProcessing(true);
      setRegistrationProgress(0);
      
      console.log(`üîÑ [${callId}] Starting registration processing...`);
      
      const embeddings: number[][] = [];
      const qualityScores: number[] = [];
      const imagesToProcess = Math.min(capturedImages.length, TARGET_IMAGES);
      
      console.log(`üñºÔ∏è [${callId}] Processing ${imagesToProcess} images for embedding extraction`);
      
      // Process each image sequentially with detailed logging
      for (let i = 0; i < imagesToProcess; i++) {
        if (!isProcessingRef.current) {
          console.log(`üõë [${callId}] Processing interrupted at image ${i}`);
          return;
        }

        setRegistrationProgress(Math.round((i / imagesToProcess) * 80));
        
        try {
          const response = await fetch(capturedImages[i]);
          const blob = await response.blob();
          
          // üîß ‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON)
          const formData = new FormData();
          formData.append('file', blob, `face_${i + 1}.jpg`);
          formData.append('model_name', 'facenet');

          const embeddingResponse = await fetch('http://localhost:8080/api/face-recognition/extract-embedding', {
            method: 'POST',
            body: formData
          });
          
          if (!embeddingResponse.ok) {
            console.error(`‚ùå [${callId}] Failed to extract embedding for image ${i + 1}:`, embeddingResponse.status);
            continue;
          }

          const embeddingResult = await embeddingResponse.json();
          
          if (embeddingResult.success && embeddingResult.embedding) {
            embeddings.push(embeddingResult.embedding);
            qualityScores.push(embeddingResult.quality_score || 0.8);
            console.log(`‚úÖ [${callId}] Successfully extracted embedding ${i + 1}/${imagesToProcess}`);
          } else {
            console.error(`‚ùå [${callId}] Failed to extract embedding for image ${i + 1}:`, embeddingResult.message);
          }
        } catch (err) {
          console.error(`‚ùå [${callId}] Error processing image ${i + 1}:`, err);
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      if (embeddings.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î embedding ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }
      
      setRegistrationProgress(90);
      
      const bestEmbeddingIndex = qualityScores.indexOf(Math.max(...qualityScores));
      const finalEmbedding = embeddings[bestEmbeddingIndex] || embeddings[0];
      const averageQuality = qualityScores.reduce((a, b) => a + b, 0) / qualityScores.length;
      
      setRegistrationProgress(100);
      
      console.log(`üéØ [${callId}] Face registration processed successfully:`, {
        totalImagesCollected: capturedImages.length,
        imagesProcessed: imagesToProcess,
        successfulEmbeddings: embeddings.length,
        averageQuality: averageQuality,
        bestEmbeddingIndex
      });
      
      // üîß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onComplete ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      console.log(`‚úÖ [${callId}] Calling onComplete...`);
      
      await onComplete({
        embedding: finalEmbedding,
        imageUrl: capturedImages[bestEmbeddingIndex],
        qualityScore: averageQuality * 100,
        confidence: averageQuality,
        totalImages: capturedImages.length,
        userInfo: userInfo ? {
          firstName: userInfo.firstName,
          lastName: userInfo.lastName,
          userId: userInfo.userId || ''
        } : undefined
      });
      
      console.log(`‚úÖ [${callId}] onComplete call finished successfully`);
      
    } catch (err) {
      console.error(`‚ùå [${callId}] Registration processing error:`, err);
      const errorMessage = err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤';
      setError(errorMessage);
      onError(errorMessage);
      
      // Reset flags on error
      hasCompletedRef.current = false;
    } finally {
      console.log(`üîì [${callId}] Finally block - resetting processing flag`);
      isProcessingRef.current = false;
      setIsProcessing(false);
    }
  }, [capturedImages, onComplete, onError, userInfo, testAPIConnectivity]);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á capture function ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
  const captureAndSaveCroppedImage = useCallback(async (croppedCanvas: HTMLCanvasElement) => {
    if (imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current) {
      console.log('üö´ Capture blocked:', { imageCount, TARGET_IMAGES, processing: isProcessingRef.current, completed: hasCompletedRef.current });
      return;
    }

    const imageDataUrl = croppedCanvas.toDataURL('image/jpeg', 0.9);
    const newImageCount = imageCount + 1;
    
    setCapturedImages(prev => [...prev, imageDataUrl]);
    setImageCount(newImageCount);
    
    console.log(`üì∏ Captured cropped face image ${newImageCount}/${TARGET_IMAGES}`);
    
    // Save image to server (optional)
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = `face-crop-${newImageCount.toString().padStart(2, '0')}-${timestamp}.jpg`;
      
      await fetch('/api/save-face-image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          imageData: imageDataUrl,
          fileName: fileName,
          userId: 'current-registration'
        })
      });
      
      console.log(`‚úÖ Saved cropped face image: ${fileName}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to save cropped face image:', error);
    }
    
    // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏†‡∏≤‡∏û
    if (newImageCount >= TARGET_IMAGES && !hasCompletedRef.current) {
      console.log('üéØ All images collected, initiating completion sequence...');
      
      cleanupTimeouts();
      setStep('completed');
      
      completionTimeoutRef.current = setTimeout(() => {
        stopCamera();
        setShowCameraModal(false);
        setStep('registering');
        
        registrationTimeoutRef.current = setTimeout(() => {
          if (!isProcessingRef.current) {
            processRegistration();
          }
        }, 200);
      }, 1500);
    }
  }, [imageCount, TARGET_IMAGES, stopCamera, cleanupTimeouts, processRegistration]);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á face detection ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition
  const detectFace = useCallback(async () => {
    if (!videoRef.current || !canvasRef.current || !isStreaming || 
        imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current) {
      return;
    }

    const canvas = canvasRef.current;
    const video = videoRef.current;
    const ctx = canvas.getContext('2d');
    
    if (!ctx || video.readyState < 2) {
      return;
    }

    try {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0);

      canvas.toBlob(async (blob) => {
        if (!blob || imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current) return;

        const formData = new FormData();
        formData.append('image', blob, 'face.jpg');

        try {
          const faceDetectionData = new FormData();
          faceDetectionData.append('file', blob, 'face.jpg');
          faceDetectionData.append('model_name', 'yolov11m');
          faceDetectionData.append('conf_threshold', '0.5');
          faceDetectionData.append('max_faces', '5');

          const faceResponse = await fetch('http://localhost:8080/api/face-detection/detect', {
            method: 'POST',
            body: faceDetectionData
          });

          if (!faceResponse.ok) {
            console.error('‚ùå Face detection API error:', faceResponse.status);
            return;
          }

          const faceResult = await faceResponse.json();
          
          if (faceResult.success && faceResult.faces && faceResult.faces.length > 0) {
            const face = faceResult.faces[0];
            setFaceDetected(true);

            const bbox = face.bbox;
            const croppedCanvas = document.createElement('canvas');
            const croppedCtx = croppedCanvas.getContext('2d');
            
            if (croppedCtx && bbox) {
              let face_bbox;
              if (bbox.x1 !== undefined && bbox.y1 !== undefined && bbox.x2 !== undefined && bbox.y2 !== undefined) {
                face_bbox = {
                  x: Math.round(bbox.x1),
                  y: Math.round(bbox.y1),
                  width: Math.round(bbox.x2 - bbox.x1),
                  height: Math.round(bbox.y2 - bbox.y1)
                };
              } else if (bbox.x !== undefined && bbox.y !== undefined && bbox.width !== undefined && bbox.height !== undefined) {
                face_bbox = {
                  x: Math.round(bbox.x),
                  y: Math.round(bbox.y),
                  width: Math.round(bbox.width),
                  height: Math.round(bbox.height)
                };
              } else {
                console.error(`‚ùå Unknown bbox format: ${JSON.stringify(bbox)}`);
                return;
              }

              const padding = 0.2;
              const faceWidth = face_bbox.width;
              const faceHeight = face_bbox.height;
              const paddingX = faceWidth * padding;
              const paddingY = faceHeight * padding;
              
              const cropX = Math.max(0, Math.round(face_bbox.x - paddingX));
              const cropY = Math.max(0, Math.round(face_bbox.y - paddingY));
              const cropWidth = Math.min(canvas.width - cropX, Math.round(faceWidth + (paddingX * 2)));
              const cropHeight = Math.min(canvas.height - cropY, Math.round(faceHeight + (paddingY * 2)));
              
              const minSize = 224;
              const maxSize = 640;
              const targetSize = Math.max(minSize, Math.min(maxSize, Math.max(cropWidth, cropHeight)));
              
              let finalWidth, finalHeight;
              if (cropWidth > cropHeight) {
                finalWidth = targetSize;
                finalHeight = Math.floor((cropHeight / cropWidth) * targetSize);
              } else {
                finalHeight = targetSize;
                finalWidth = Math.floor((cropWidth / cropHeight) * targetSize);
              }
              
              finalWidth = Math.max(finalWidth, minSize);
              finalHeight = Math.max(finalHeight, minSize);
              
              croppedCanvas.width = finalWidth;
              croppedCanvas.height = finalHeight;
              
              croppedCtx.drawImage(
                canvas, 
                cropX, cropY, cropWidth, cropHeight,
                0, 0, finalWidth, finalHeight
              );
              
              croppedCanvas.toBlob(async (croppedBlob) => {
                if (!croppedBlob || imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current) return;

                const antispoofingData = new FormData();
                antispoofingData.append('image', croppedBlob, 'cropped_face.jpg');
                antispoofingData.append('confidence_threshold', '0.5');

                let isReal = true;
                try {
                  const antispoofingResponse = await fetch('http://localhost:8080/api/anti-spoofing/detect-upload', {
                    method: 'POST',
                    body: antispoofingData
                  });

                  if (!antispoofingResponse.ok) {
                    console.error('‚ùå Anti-spoofing API error:', antispoofingResponse.status);
                    isReal = true;
                  } else {
                    const antispoofingResult = await antispoofingResponse.json();
                    isReal = antispoofingResult.success && !antispoofingResult.overall_result?.spoofing_detected;
                  }
                } catch (err) {
                  console.error('‚ùå Anti-spoofing error:', err);
                  isReal = true;
                }
                
                setIsRealFace(isReal);
                
                // üîß NEW: ‡πÉ‡∏ä‡πâ Enhanced Quality Check
                const enhancedQuality = await checkFaceQualityEnhanced(canvas);
                
                // üîß Fallback: ‡∏ñ‡πâ‡∏≤ Enhanced Quality API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
                if (!enhancedQuality.success) {
                  console.warn('‚ö†Ô∏è Enhanced quality check failed, using fallback method');
                  
                  const fallbackQuality = Math.min(face.bbox.confidence * 100, face.quality_score || 85);
                  setFaceQuality(fallbackQuality);
                  setDetectionProgress(Math.min(fallbackQuality, 100));
                  
                  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                  const passesFallbackChecks = (
                    face.bbox.confidence >= 0.8 && // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0.7 ‡πÄ‡∏õ‡πá‡∏ô 0.8
                    Math.min(face_bbox.width, face_bbox.height) >= 140 && // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 120 ‡πÄ‡∏õ‡πá‡∏ô 140
                    fallbackQuality >= 75 && // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 65 ‡πÄ‡∏õ‡πá‡∏ô 75
                    isReal
                  );
                  
                  if (passesFallbackChecks && imageCount < TARGET_IMAGES && !isProcessingRef.current && !hasCompletedRef.current) {
                    console.log(`üéØ Auto-capturing fallback quality face image ${imageCount + 1}/${TARGET_IMAGES}`, {
                      confidence: face.bbox.confidence.toFixed(3),
                      faceSize: `${face_bbox.width}x${face_bbox.height}`,
                      qualityScore: fallbackQuality.toFixed(1),
                      isReal
                    });
                    
                    await captureAndSaveCroppedImage(croppedCanvas);
                    return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠
                  }
                }
                
                console.log(`üöÄ Enhanced Quality Assessment:`, {
                  success: enhancedQuality.success,
                  qualityScore: enhancedQuality.overallQuality.toFixed(1),
                  grade: enhancedQuality.qualityGrade,
                  confidence: face.bbox.confidence.toFixed(3),
                  faceSize: `${face_bbox.width}x${face_bbox.height}`,
                  isSharp: enhancedQuality.isSharp,
                  isWellLit: enhancedQuality.isWellLit,
                  isFrontal: enhancedQuality.isFrontal,
                  hasLandmarks: enhancedQuality.hasLandmarks,
                  poseAngles: enhancedQuality.poseAngles,
                  isReal
                });

                // üîß ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
                const minQualityThreshold = 80; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 71% ‡πÄ‡∏õ‡πá‡∏ô 80% quality score
                const maxPoseAngle = 10; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 15 ‡πÄ‡∏õ‡πá‡∏ô 10 degrees - ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤
                const minFaceConfidence = 0.85; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0.8 ‡πÄ‡∏õ‡πá‡∏ô 0.85
                const minFaceSize = 150; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 120 ‡πÄ‡∏õ‡πá‡∏ô 150 pixels
                
                const passesEnhancedChecks = (
                  enhancedQuality.success &&
                  enhancedQuality.overallQuality >= minQualityThreshold &&
                  enhancedQuality.isSharp &&
                  enhancedQuality.isWellLit &&
                  enhancedQuality.isFrontal &&
                  enhancedQuality.hasLandmarks &&
                  Math.abs(enhancedQuality.poseAngles.yaw) <= maxPoseAngle &&
                  Math.abs(enhancedQuality.poseAngles.pitch) <= maxPoseAngle &&
                  Math.abs(enhancedQuality.poseAngles.roll) <= (maxPoseAngle * 1.5) && // ‡∏•‡∏î‡∏à‡∏≤‡∏Å *2 ‡πÄ‡∏õ‡πá‡∏ô *1.5
                  face.bbox.confidence >= minFaceConfidence &&
                  Math.min(face_bbox.width, face_bbox.height) >= minFaceSize &&
                  isReal
                );
                
                setFaceQuality(enhancedQuality.overallQuality);
                setDetectionProgress(Math.min(enhancedQuality.overallQuality, 100));

                if (passesEnhancedChecks && imageCount < TARGET_IMAGES && !isProcessingRef.current && !hasCompletedRef.current) {
                  console.log(`üéØ Auto-capturing PREMIUM quality face image ${imageCount + 1}/${TARGET_IMAGES}`, {
                    qualityScore: enhancedQuality.overallQuality.toFixed(1),
                    grade: enhancedQuality.qualityGrade,
                    confidence: face.bbox.confidence.toFixed(3),
                    faceSize: `${face_bbox.width}x${face_bbox.height}`,
                    poseAngles: enhancedQuality.poseAngles,
                    isReal
                  });
                  
                  await captureAndSaveCroppedImage(croppedCanvas);
                } else {
                  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô Enhanced Quality Check
                  const reasons = [];
                  if (!enhancedQuality.success) reasons.push('Enhanced check failed');
                  if (enhancedQuality.overallQuality < minQualityThreshold) reasons.push(`Quality too low (${enhancedQuality.overallQuality.toFixed(1)}%)`);
                  if (!enhancedQuality.isSharp) reasons.push('Image blurry');
                  if (!enhancedQuality.isWellLit) reasons.push('Poor lighting');
                  if (!enhancedQuality.isFrontal) reasons.push('Not frontal');
                  if (!enhancedQuality.hasLandmarks) reasons.push('No landmarks detected');
                  if (Math.abs(enhancedQuality.poseAngles.yaw) > maxPoseAngle) reasons.push(`Yaw angle too large (${enhancedQuality.poseAngles.yaw.toFixed(1)}¬∞)`);
                  if (Math.abs(enhancedQuality.poseAngles.pitch) > maxPoseAngle) reasons.push(`Pitch angle too large (${enhancedQuality.poseAngles.pitch.toFixed(1)}¬∞)`);
                  if (face.bbox.confidence < 0.8) reasons.push('Low detection confidence');
                  if (!isReal) reasons.push('Not real face');
                  
                  console.log(`‚ö†Ô∏è Enhanced quality check failed:`, {
                    reasons: reasons.join(', '),
                    recommendations: enhancedQuality.recommendations,
                    currentValues: {
                      quality: enhancedQuality.overallQuality.toFixed(1),
                      yaw: enhancedQuality.poseAngles.yaw.toFixed(1),
                      pitch: enhancedQuality.poseAngles.pitch.toFixed(1),
                      confidence: face.bbox.confidence.toFixed(3),
                      faceSize: Math.min(face_bbox.width, face_bbox.height)
                    }
                  });
                }
              }, 'image/jpeg', 0.8);
            }
          } else {
            setFaceDetected(false);
            setIsRealFace(false);
            setFaceQuality(0);
            setDetectionProgress(0);
          }
        } catch (error) {
          console.error('‚ùå Face detection API error:', error);
        }
      });
          
    } catch (error) {
      console.error('‚ùå Canvas processing error:', error);
    }
  }, [isStreaming, imageCount, TARGET_IMAGES, captureAndSaveCroppedImage]);

  // Manual capture function
  const handleCapture = useCallback(async () => {
    if (!videoRef.current || !canvasRef.current || imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current) return;

    const canvas = canvasRef.current;
    const video = videoRef.current;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return;

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0);

    const imageDataUrl = canvas.toDataURL('image/jpeg', 0.9);
    const newImageCount = imageCount + 1;
    
    setCapturedImages(prev => [...prev, imageDataUrl]);
    setImageCount(newImageCount);
    
    console.log(`üì∏ Manual capture: image ${newImageCount}/${TARGET_IMAGES}`);
  }, [imageCount, TARGET_IMAGES]);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° camera
  useEffect(() => {
    if (showCameraModal && !initializingRef.current && !streamRef.current) {
      initCamera();
    } else if (!showCameraModal && streamRef.current) {
      stopCamera();
    }
  }, [showCameraModal, initCamera, stopCamera]);

  // üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö face detection
  useEffect(() => {
    if (showCameraModal && isStreaming && step === 'detecting' && 
        imageCount < TARGET_IMAGES && !isProcessingRef.current && !hasCompletedRef.current) {
      
      console.log('üîç Starting face detection interval');
      
      const startTimeout = setTimeout(() => {
        if (!isProcessingRef.current && !hasCompletedRef.current) {
          detectionIntervalRef.current = setInterval(() => {
            if (!isProcessingRef.current && !hasCompletedRef.current && imageCount < TARGET_IMAGES) {
              detectFace();
            }
          }, 500); // ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 500ms ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        }
      }, 500);

      return () => {
        clearTimeout(startTimeout);
        if (detectionIntervalRef.current) {
          clearInterval(detectionIntervalRef.current);
          detectionIntervalRef.current = null;
        }
      };
    }

    return () => {
      if (detectionIntervalRef.current) {
        clearInterval(detectionIntervalRef.current);
        detectionIntervalRef.current = null;
      }
    };
  }, [showCameraModal, isStreaming, step, imageCount, TARGET_IMAGES, detectFace]);

  // üîß Cleanup on unmount
  useEffect(() => {
    return () => {
      console.log('üßπ Component unmounting, cleaning up...');
      cleanupTimeouts();
      stopCamera();
      isProcessingRef.current = false;
      hasCompletedRef.current = false;
    };
  }, [cleanupTimeouts, stopCamera]);

  // üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
  const calculateImageSharpness = useCallback((canvas: HTMLCanvasElement, faceBox: any): number => {
    const ctx = canvas.getContext('2d');
    if (!ctx) return 0;

    // Extract face region
    const faceRegion = ctx.getImageData(
      faceBox.x, 
      faceBox.y, 
      faceBox.width, 
      faceBox.height
    );
    
    const data = faceRegion.data;
    const width = faceRegion.width;
    const height = faceRegion.height;
    
    // Convert to grayscale and calculate Laplacian variance (sharpness metric)
    let variance = 0;
    let mean = 0;
    
    // Calculate mean
    for (let i = 0; i < data.length; i += 4) {
      const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
      mean += gray;
    }
    mean /= (data.length / 4);
    
    // Calculate variance (simplified sharpness detection)
    for (let i = 0; i < data.length; i += 4) {
      const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];
      variance += Math.pow(gray - mean, 2);
    }
    variance /= (data.length / 4);
    
    // Return normalized sharpness score (0-100)
    return Math.min(100, Math.max(0, variance / 100));
  }, []);

  // üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
  const checkFaceQuality = useCallback((canvas: HTMLCanvasElement, face: any, faceBox: any): {
    isSharp: boolean;
    isWellLit: boolean;
    isFrontal: boolean;
    overallQuality: number;
  } => {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
    const sharpness = calculateImageSharpness(canvas, faceBox);
    const isSharp = sharpness > 30; // threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏™‡∏á - ‡πÉ‡∏ä‡πâ confidence ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
    const brightness = face.bbox.confidence;
    const isWellLit = brightness > 0.8; // ‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á (‡πÉ‡∏ä‡πâ landmarks ‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
    const landmarks = face.landmarks;
    let isFrontal = true;
    
    if (landmarks && landmarks.length >= 5) {
      // Simple frontal face check using eye positions
      const leftEye = landmarks[0];
      const rightEye = landmarks[1];
      
      if (leftEye && rightEye) {
        const eyeDistance = Math.abs(leftEye.x - rightEye.x);
        const faceWidth = faceBox.width;
        const eyeRatio = eyeDistance / faceWidth;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        isFrontal = eyeRatio > 0.2 && eyeRatio < 0.5;
      }
    }
    
    // 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    const qualityFactors = [
      isSharp ? 30 : 0,
      isWellLit ? 30 : 0,
      isFrontal ? 25 : 0,
      Math.min(15, sharpness / 2)
    ];
    
    const overallQuality = qualityFactors.reduce((sum, factor) => sum + factor, 0);
    
    return {
      isSharp,
      isWellLit,
      isFrontal,
      overallQuality: Math.min(100, overallQuality)
    };
  }, [calculateImageSharpness]);

  // üöÄ NEW: Enhanced Face Quality Check using MediaPipe APIs
  const checkFaceQualityEnhanced = useCallback(async (canvas: HTMLCanvasElement): Promise<{
    success: boolean;
    isSharp: boolean;
    isWellLit: boolean;
    isFrontal: boolean;
    hasLandmarks: boolean;
    overallQuality: number;
    qualityGrade: string;
    poseAngles: { yaw: number; pitch: number; roll: number };
    recommendations: string[];
    error?: string;
  }> => {
    try {
      // Convert canvas to blob
      const blob = await new Promise<Blob>((resolve) => {
        canvas.toBlob((blob) => {
          if (blob) resolve(blob);
        }, 'image/jpeg', 0.8);
      });

      // Prepare form data
      const formData = new FormData();
      formData.append('file', blob, 'face_check.jpg');
      formData.append('person_id', userInfo?.userId || 'temp_user');
      formData.append('strict_mode', 'true');
      formData.append('use_landmarks', 'true');

      // Call enhanced validation API
      const response = await fetch('http://localhost:8080/api/face-enhanced/validate-quality', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const result = await response.json();
      
      // Parse quality assessment
      const qualityAssessment = result.quality_assessment || {};
      const landmarkAnalysis = result.landmark_analysis || {};
      const poseEstimation = landmarkAnalysis.pose_estimation || {};

      // Extract quality metrics
      const detailedScores = qualityAssessment.detailed_scores || {};
      const sharpnessScore = parseFloat(detailedScores.sharpness || '0');
      const brightnessScore = parseFloat(detailedScores.brightness || '0');
      const frontalScore = parseFloat(detailedScores.frontal || '0');
      const overallScore = parseFloat(qualityAssessment.overall_score || '0');

      return {
        success: result.success || false,
        isSharp: sharpnessScore > 0.6,
        isWellLit: brightnessScore > 0.6,
        isFrontal: frontalScore > 0.7,
        hasLandmarks: landmarkAnalysis.landmarks_found || false,
        overallQuality: overallScore * 100, // Convert to percentage
        qualityGrade: qualityAssessment.quality_grade || 'Poor',
        poseAngles: {
          yaw: parseFloat(poseEstimation.yaw || '0'),
          pitch: parseFloat(poseEstimation.pitch || '0'),
          roll: parseFloat(poseEstimation.roll || '0')
        },
        recommendations: qualityAssessment.recommendations || []
      };

    } catch (error) {
      console.error('Enhanced quality check failed:', error);
      return {
        success: false,
        isSharp: false,
        isWellLit: false,
        isFrontal: false,
        hasLandmarks: false,
        overallQuality: 0,
        qualityGrade: 'Error',
        poseAngles: { yaw: 0, pitch: 0, roll: 0 },
        recommendations: ['‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ'],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }, [userInfo?.userId]);

  const renderSetupStep = () => (
    <div className="text-center">
      <div className="mb-6">
        <CameraOutlined className="text-6xl text-blue-500 mb-4" />
        <Title level={4}>‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</Title>
        <Paragraph type="secondary">
          ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Face Embedding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        </Paragraph>
      </div>

      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <Row gutter={16}>
          <Col span={12}>
            <div className="text-center">
              <InfoCircleOutlined className="text-2xl text-blue-500 mb-2" />
              <Text strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô</Text>
              <ul className="text-left text-sm mt-2">
                <li>‚Ä¢ <strong>Face Detection:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û</li>
                <li>‚Ä¢ <strong>Anti-Spoofing:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á</li>
                <li>‚Ä¢ <strong>Quality Check:</strong> ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û</li>
                <li>‚Ä¢ <strong>Embedding:</strong> ‡∏™‡∏£‡πâ‡∏≤‡∏á Face Embedding</li>
              </ul>
            </div>
          </Col>
          <Col span={12}>
            <div className="text-center">
              <CheckCircleOutlined className="text-2xl text-green-500 mb-2" />
              <Text strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö</Text>
              <ul className="text-left text-sm mt-2">
                <li>‚Ä¢ ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</li>
                <li>‚Ä¢ ‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏µ‡∏¢‡∏á &gt;10¬∞</li>
                <li>‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡πÅ‡∏ß‡πà‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å</li>
                <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‚â•80% ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</li>
                <li>‚Ä¢ ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
                <li>‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {TARGET_IMAGES} ‡∏†‡∏≤‡∏û‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á</li>
              </ul>
            </div>
          </Col>
        </Row>
      </div>

      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
        <Button
          type="primary"
          size="large"
          icon={<CameraOutlined />}
          onClick={startCameraModal}
          loading={isProcessing || externalLoading}
          disabled={isProcessingRef.current || hasCompletedRef.current}
        >
          ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        </Button>
        
        <Button
          type="link"
          onClick={() => setShowGuide(true)}
          icon={<InfoCircleOutlined />}
        >
          ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        </Button>

        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        {onBack && (
          <Button
            type="default"
            onClick={onBack}
            disabled={isProcessing || externalLoading}
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
        )}
      </Space>
    </div>
  );

  const renderRegisteringStep = () => (
    <div className="text-center">
      <div className="mb-6">
        <Spin size="large" />
        <Title level={4} className="mt-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...</Title>
        <Paragraph type="secondary">
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û {TARGET_IMAGES} ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        </Paragraph>
      </div>
      
      <Progress 
        percent={registrationProgress} 
        status="active" 
        strokeColor={{
          '0%': '#108ee9',
          '100%': '#87d068',
        }}
      />
      
      <div className="mt-4 text-sm text-gray-500">
        <p>‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏Å‡∏±‡∏î‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û {Math.min(capturedImages.length, TARGET_IMAGES)} ‡∏†‡∏≤‡∏û...</p>
        <p>‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...</p>
        <p>‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...</p>
      </div>
    </div>
  );

  const renderCompletedStep = () => (
    <div className="text-center">
      <div className="mb-6">
        <CheckCircleOutlined className="text-6xl text-green-500 mb-4" />
        <Title level={4}>‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!</Title>
        <Paragraph type="secondary">
          ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏ö {TARGET_IMAGES} ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß
        </Paragraph>
        <Paragraph type="secondary">
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô...
        </Paragraph>
      </div>
      
      <Progress percent={100} status="success" strokeColor="#52c41a" />
      
      <div className="mt-4">
        <Alert
          message="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"
          description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
          type="success"
          showIcon
        />
      </div>
    </div>
  );

  return (
    <Card className="w-full max-w-2xl mx-auto">
      {error && (
        <Alert
          message="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
          description={error}
          type="error"
          showIcon
          closable
          onClose={() => setError(null)}
          className="mb-4"
        />
      )}

      {step === 'setup' && renderSetupStep()}
      {step === 'registering' && renderRegisteringStep()}
      {step === 'completed' && renderCompletedStep()}

      {/* Camera Modal */}
      <Modal
        title={
          <Space>
            <CameraOutlined />
            {imageCount >= TARGET_IMAGES ? '‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!' : '‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'}
            {isStreaming && faceDetected && imageCount < TARGET_IMAGES && (
              <Badge status="success" text="‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤" />
            )}
            {isStreaming && !faceDetected && imageCount < TARGET_IMAGES && (
              <Badge status="processing" text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö..." />
            )}
            {imageCount >= TARGET_IMAGES && (
              <Badge status="success" text="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" />
            )}
          </Space>
        }
        open={showCameraModal}
        onCancel={closeCameraModal}
        width={800}
        footer={
          imageCount >= TARGET_IMAGES ? [
            <Button key="close" onClick={closeCameraModal} type="primary">
              ‡∏õ‡∏¥‡∏î
            </Button>
          ] : [
            <Button key="close" onClick={closeCameraModal}>
              ‡∏õ‡∏¥‡∏î
            </Button>,
            <Button 
              key="manual-capture" 
              type="primary" 
              onClick={handleCapture}
              disabled={!faceDetected || !isRealFace || faceQuality < 70 || imageCount >= TARGET_IMAGES || isProcessingRef.current || hasCompletedRef.current}
            >
              üì∏ ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ({imageCount}/{TARGET_IMAGES})
            </Button>
          ]
        }
        destroyOnClose
      >
        <div className="space-y-4">
          {error && (
            <Alert
              message="‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
              description={error}
              type="error"
              showIcon
            />
          )}

          {/* Statistics */}
          {isStreaming && (
            <Card size="small">
              <Row gutter={16}>
                <Col span={6}>
                  <Statistic
                    title="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß"
                    value={imageCount}
                    suffix={`/${TARGET_IMAGES}`}
                    valueStyle={{ 
                      color: imageCount >= TARGET_IMAGES ? '#3f8600' : '#1890ff' 
                    }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤"
                    value={faceQuality}
                    precision={1}
                    suffix="%"
                    valueStyle={{ 
                      color: faceQuality >= 80 ? '#3f8600' : faceQuality >= 70 ? '#faad14' : '#cf1322' 
                    }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="Anti-Spoofing"
                    value={isRealFace ? "‡∏ú‡πà‡∏≤‡∏ô" : "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"}
                    valueStyle={{ 
                      color: isRealFace ? '#3f8600' : '#faad14' 
                    }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                    value={faceDetected ? "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö" : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
                    valueStyle={{ 
                      color: faceDetected ? '#3f8600' : '#1890ff' 
                    }}
                  />
                </Col>
              </Row>
            </Card>
          )}

          {/* Video */}
          <div className="relative bg-black rounded-lg overflow-hidden">
            <video
              ref={videoRef}  
              autoPlay
              playsInline
              muted
              className="w-full h-auto"
              style={{ 
                maxHeight: '400px',
                transform: 'scaleX(-1)'
              }}
            />
            
            <canvas
              ref={canvasRef}
              className="hidden"
            />

            {/* Overlays */}
            {faceDetected && imageCount < TARGET_IMAGES && (
              <div className="absolute top-4 left-4 bg-green-500 text-white px-3 py-1 rounded-full">
                <CheckCircleOutlined className="mr-1" />
                ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
              </div>
            )}

            {faceDetected && imageCount < TARGET_IMAGES && (
              <div className={`absolute top-4 right-4 px-3 py-1 rounded-full text-white ${
                isRealFace ? 'bg-green-500' : 'bg-orange-500'
              }`}>
                {isRealFace ? '‚úì ‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á' : '‚ö† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'}
              </div>
            )}

            {imageCount >= TARGET_IMAGES && (
              <div className="absolute inset-0 bg-green-500 bg-opacity-80 flex items-center justify-center rounded-lg">
                <div className="text-center text-white">
                  <CheckCircleOutlined className="text-6xl mb-4" />
                  <h3 className="text-xl font-bold">‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!</h3>
                  <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</p>
                </div>
              </div>
            )}

            <div className="absolute bottom-4 left-4 bg-blue-500 text-white px-3 py-1 rounded-full">
              {imageCount}/{TARGET_IMAGES} ‡∏†‡∏≤‡∏û
            </div>
          </div>

          {/* Progress bars */}
          <Row gutter={16}>
            <Col span={12}>
              <div className="text-center">
                <Text>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</Text>
                <Progress
                  percent={detectionProgress}
                  status={detectionProgress >= 80 ? 'success' : 'active'}
                  strokeColor={{
                    '0%': '#108ee9',
                    '100%': '#87d068',
                  }}
                />
              </div>
            </Col>
            <Col span={12}>
              <div className="text-center">
                <Text>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û</Text>
                <Progress
                  percent={Math.round((imageCount / TARGET_IMAGES) * 100)}
                  status={imageCount >= TARGET_IMAGES ? 'success' : 'active'}
                  strokeColor={{
                    '0%': '#fa541c',
                    '100%': '#52c41a',
                  }}
                />
              </div>
            </Col>
          </Row>

          {/* Alerts */}
          <Alert
            message="‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î)"
            description="‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û ‚â•80% ‚Ä¢ ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10¬∞) ‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‚â•150 pixels ‚Ä¢ ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‚Ä¢ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Ä¢ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            type="info"
            showIcon
          />

          {faceDetected && isRealFace && faceQuality >= 80 && imageCount < TARGET_IMAGES && (
            <Alert
              message="‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á!"
              description={`‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (${imageCount}/${TARGET_IMAGES}) - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ${faceQuality.toFixed(1)}% (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)`}
              type="success"
              showIcon
            />
          )}

          {faceDetected && isRealFace && faceQuality >= 70 && faceQuality < 80 && imageCount < TARGET_IMAGES && (
            <Alert
              message="‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
              description={`‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${faceQuality.toFixed(1)}% (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‚â•80%) - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á`}
              type="warning"
              showIcon
            />
          )}

          {faceDetected && (!isRealFace || faceQuality < 70) && imageCount < TARGET_IMAGES && (
            <Alert
              message="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"
              description={`${!isRealFace ? '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á' : `‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥: ${faceQuality.toFixed(1)}%`} - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô`}
              type="error"
              showIcon
            />
          )}

          {imageCount >= TARGET_IMAGES && (
            <Alert
              message="‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!"
              description="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô..."
              type="success"
              showIcon
            />
          )}
        </div>
      </Modal>

      {/* Guide Modal */}
      <Modal
        title="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        open={showGuide}
        onCancel={() => setShowGuide(false)}
        footer={[
          <Button key="close" type="primary" onClick={() => setShowGuide(false)}>
            ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß
          </Button>
        ]}
      >
        <div className="space-y-4">
          <div>
            <Title level={5}>‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:</Title>
            <ul>
              <li>‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</li>
              <li>‚Ä¢ ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö</li>
              <li>‚Ä¢ ‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á</li>
              <li>‚Ä¢ ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠</li>
              <li>‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏°‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</li>
            </ul>
          </div>
          
          <div>
            <Title level={5}>‚ùå ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:</Title>
            <ul>
              <li>‚Ä¢ ‡∏™‡∏ß‡∏°‡πÅ‡∏ß‡πà‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ß‡πà‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°</li>
              <li>‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</li>
              <li>‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢</li>
              <li>‚Ä¢ ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á</li>
              <li>‚Ä¢ ‡πÑ‡∏Å‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ</li>
            </ul>
          </div>
        </div>
      </Modal>
    </Card>
  );
};

export default FaceRegistration;