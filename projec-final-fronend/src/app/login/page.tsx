'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Typography, 
  Alert,
  Divider,
  message
} from 'antd';
import { 
  LockOutlined,
  MailOutlined,
  LoginOutlined,
  ScanOutlined
} from '@ant-design/icons';
import { useRouter } from 'next/navigation';
import FaceLoginModal from '../../components/auth/FaceLoginModal';
import FaceAPIStatus from '@/components/ai/FaceAPIStatus';

const { Title, Text, Paragraph } = Typography;

interface LoginForm {
  identifier: string;  // Can be email or username
  password: string;
}

const LoginPage: React.FC = () => {
  const router = useRouter();
  const [form] = Form.useForm();  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showAdvancedFaceScan, setShowAdvancedFaceScan] = useState(false);

  const handleLogin = async (values: LoginForm) => {
    try {
      setLoading(true);
      setError(null);

      // Determine if the identifier is an email or username
      const isEmail = values.identifier.includes('@');
      const loginData = {
        [isEmail ? 'email' : 'username']: values.identifier,
        password: values.password,
        loginMethod: 'password'
      };

      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(loginData)
      });

      const result = await response.json();

      if (response.ok && result.success) {
        message.success('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        
        // Store user data in localStorage (in production, use proper state management)
        localStorage.setItem('user', JSON.stringify(result.data.user));
        localStorage.setItem('token', result.data.token);
        
        // Redirect to dashboard
        router.push('/dashboard');
      } else {
        setError(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      }    } catch (error) {
      console.error('Login error:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setLoading(false);
    }
  };  const handleFaceLoginSuccess = async (result: any) => {
    console.log('üéâ Face login success result:', result);
    
    // ‡∏õ‡∏¥‡∏î modal
    setShowAdvancedFaceScan(false);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (result.api_result && result.api_result.data && result.api_result.data.user) {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å login API (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô HTML demo)
      const userData = result.api_result.data.user;
      const token = result.api_result.data.token;
      
      console.log('‚úÖ Using data from login API:', userData);
      message.success(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${userData.fullName || userData.username}!`);
      
      // Store user data ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô password login
      localStorage.setItem('user', JSON.stringify(userData));
      localStorage.setItem('token', token);
      
      // Redirect to dashboard
      router.push('/dashboard');    } else if (result.user && result.user.identity !== undefined) {
      // Fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å login API
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å login API - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤');
      console.log('üìã Face scan user data:', result.user);
      message.success(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${result.user.fullName || result.user.username}`);
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Face Recognition API ‡πÅ‡∏•‡πâ‡∏ß
      const userData = {
        id: result.user.id,
        identity: result.user.identity,
        username: result.user.username,
        email: result.user.email,
        firstName: result.user.firstName,
        lastName: result.user.lastName,
        fullName: result.user.fullName,
        isVerified: result.user.isVerified || false
      };
      console.log('üíæ Storing user data:', userData);
      localStorage.setItem('user', JSON.stringify(userData));
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Face Login
      if (result.token && result.token.includes('.')) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ JWT token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        localStorage.setItem('token', result.token);
        setTimeout(() => {
          router.push('/dashboard');
        }, 100);
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å login API
        console.log('üîÑ Creating proper JWT token for face login...');
        try {
          const loginResponse = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              loginMethod: 'face',
              userId: result.user.id,
              username: result.user.username
            })
          });
          
          if (loginResponse.ok) {
            const loginResult = await loginResponse.json();
            console.log('üîë Login API response:', loginResult);
            
            if (loginResult.success && loginResult.data?.token) {
              localStorage.setItem('token', loginResult.data.token);
              console.log('‚úÖ JWT token created and stored successfully');
              
              // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ localStorage update
              setTimeout(() => {
                router.push('/dashboard');
              }, 100);
            } else {
              console.error('Login API response missing token:', loginResult);
              message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÑ‡∏î‡πâ');
              return;
            }
          } else {
            console.error('Failed to create JWT token');
            message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token');
            return;
          }
        } catch (error) {
          console.error('Error creating JWT token:', error);
          message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token');
          return;
        }
      }
      
    } else {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
    }
  };
  const handleFaceLoginError = (error: string) => {
    setError(error);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Navigation Bar */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">            <div className="flex items-center">
              <h1 className="text-2xl font-bold text-blue-600">ü§ñ FaceSocial</h1>
            </div>
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-4">
                <Link href="/" className="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                  ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                </Link>
                <Link href="/register" className="text-blue-600 hover:text-blue-800 px-3 py-2 rounded-md text-sm font-medium">
                  ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                </Link>
              </div>
            </div>          </div>
        </div>
      </nav>
      {/* Main Content */}
      <div className="py-12 px-4">
        <div className="max-w-md mx-auto">
          {/* Face API Status */}
          <div className="mb-6">
            <FaceAPIStatus />
          </div>
          
          <Card className="shadow-lg">
            <div className="text-center mb-8">
              <LoginOutlined className="text-5xl text-blue-500 mb-4" />
              <Title level={2}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Title>
              <Paragraph type="secondary">
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
              </Paragraph>
            </div>

            {/* Error Alert */}
            {error && (
              <Alert
                message="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                description={error}
                type="error"
                showIcon
                closable
                onClose={() => setError(null)}
                className="mb-6"
              />
            )}

            <Form
              form={form}
              layout="vertical"
              onFinish={handleLogin}
              autoComplete="off"
              size="large"
            >              <Form.Item
                name="identifier"
                label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                rules={[
                  { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }
                ]}
              >
                <Input 
                  prefix={<MailOutlined />} 
                  placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" 
                />
              </Form.Item>

              <Form.Item
                name="password"
                label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                rules={[
                  { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' }
                ]}
              >
                <Input.Password 
                  prefix={<LockOutlined />} 
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" 
                />
              </Form.Item>              <Form.Item>
                <Button 
                  type="primary" 
                  htmlType="submit" 
                  loading={loading}
                  size="large"
                  block
                  icon={<LoginOutlined />}
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                </Button>
              </Form.Item>
            </Form>

            <Divider>‡∏´‡∏£‡∏∑‡∏≠</Divider>

            {/* Face Scan Login Button */}
            <div className="mb-6">              <Button
                type="default"
                size="large"
                block
                icon={<ScanOutlined />}
                onClick={() => setShowAdvancedFaceScan(true)}
                className="border-2 border-blue-500 text-blue-500 hover:bg-blue-50"
              >
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Advanced)
              </Button>
            </div>

            <div className="text-center space-y-4">
              <div>
                <Text type="secondary">
                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? <a href="/register" className="text-blue-600 hover:text-blue-800">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</a>
                </Text>
              </div>
              
              <div>
                <a href="/forgot-password" className="text-blue-600 hover:text-blue-800 text-sm">
                  ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô?
                </a>
              </div>
            </div>            {/* Demo Account Info */}
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <Text strong className="text-blue-800">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</Text>
              <div className="mt-2 text-sm text-blue-700">
                <div>‡∏≠‡∏µ‡πÄ‡∏°‡∏•: admin@email.com</div>
                <div>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: admin01</div>
                <div>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: admin01</div>
                <div className="mt-1 text-xs text-green-600">‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</div>
              </div>
            </div>
          </Card>        </div>
      </div>
      {/* Face Login Modal */}
      <FaceLoginModal
        visible={showAdvancedFaceScan}
        onClose={() => setShowAdvancedFaceScan(false)}
        onSuccess={handleFaceLoginSuccess}
        onError={handleFaceLoginError}
      />
    </div>
  );
};

export default LoginPage;
