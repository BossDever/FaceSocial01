#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real-world Face Recognition Test - Improved Version
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Face Recognition ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:
- ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á ONNX ‡πÅ‡∏•‡∏∞ Framework models
- ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 2 users (boss, night) ‡∏î‡πâ‡∏ß‡∏¢ 10 ‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô test_images
- ‡∏™‡∏£‡πâ‡∏≤‡∏á Ensemble model ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å models
- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ crop ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ accuracy ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
"""

import os
import json
import time
import base64
import requests
import numpy as np
import cv2
from typing import Dict, List, Any, Tuple, Optional
import logging
from collections import defaultdict

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
API_BASE_URL = "http://localhost:8080"
TEST_IMAGES_DIR = "test_images"
OUTPUT_DIR = "output/real_world_recognition_improved"

# Users ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
USERS = {
    "boss": [f"boss_{i:02d}.jpg" for i in range(1, 11)],
    "night": [f"night_{i:02d}.jpg" for i in range(1, 11)]
}

# Model Configuration - ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô models ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î timeout
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ models ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
ONNX_MODELS = ["facenet", "adaface", "arcface"]
FRAMEWORK_MODELS = ["deepface", "facenet_pytorch"]  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 models ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2
ALL_MODELS = ONNX_MODELS + FRAMEWORK_MODELS

# Ensemble weights - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö models ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
ENSEMBLE_WEIGHTS = {
    # ONNX Models
    "facenet": 0.25,      # 25%
    "adaface": 0.25,      # 25%
    "arcface": 0.20,      # 20%
    # Framework Models (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    "deepface": 0.15,     # 15%
    "facenet_pytorch": 0.15, # 15%
}

def ensure_output_dir():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    for model in ALL_MODELS + ["ensemble"]:
        model_dir = os.path.join(OUTPUT_DIR, model)
        os.makedirs(model_dir, exist_ok=True)
    logger.info(f"Output directory: {OUTPUT_DIR}")

def image_to_base64(image_path: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô base64"""
    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode('utf-8')

def clear_database():
    """‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    try:
        # ‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô complete_endpoints.py
        clear_response = requests.post(f"{API_BASE_URL}/api/face-recognition/clear-gallery", timeout=30)
        if clear_response.status_code == 200:
            result = clear_response.json()
            logger.info(f"‚úÖ Database cleared successfully: {result.get('message', 'Cleared')}")
            return True
        else:
            logger.warning(f"Clear database failed: {clear_response.status_code}")
            # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö gallery status ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            gallery_response = requests.get(f"{API_BASE_URL}/api/face-recognition/get-gallery", timeout=30)
            if gallery_response.status_code == 200:
                gallery = gallery_response.json()
                logger.info(f"üìã Current gallery has {len(gallery)} persons")
                return True
            return False
    except Exception as e:
        logger.error(f"‚ùå Cannot access database: {e}")
        return False

def register_user_all_models(user_id: str, image_files: List[str]) -> Dict[str, int]:
    """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å models"""
    logger.info(f"üë§ Registering user: {user_id}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    available_images = []
    for img_file in image_files:
        img_path = os.path.join(TEST_IMAGES_DIR, img_file)
        if os.path.exists(img_path):
            available_images.append(img_path)
        else:
            logger.warning(f"‚ö†Ô∏è Image not found: {img_file}")
    
    if len(available_images) < 5:
        logger.error(f"‚ùå Not enough images for {user_id}: {len(available_images)}/10")
        return {}
    
    logger.info(f"üìÅ Found {len(available_images)} images for {user_id}")
    
    # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ model
    model_results = {}
    
    # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
    for model_name in ALL_MODELS:
        logger.info(f"  üß† Registering with {model_name} model...")
        
        success_count = 0
        for i, img_path in enumerate(available_images, 1):
            logger.info(f"    [{i}/{len(available_images)}] Processing: {os.path.basename(img_path)}")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
            image_base64 = image_to_base64(img_path)
            
            # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            success = add_single_face(image_base64, user_id, f"User {user_id.title()}", model_name)
            
            if success:
                success_count += 1
                logger.info(f"      ‚úÖ Success")
            else:
                logger.error(f"      ‚ùå Failed")
            
            # ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            time.sleep(1)
        
        model_results[model_name] = success_count
        logger.info(f"  üìä {model_name}: {success_count}/{len(available_images)} success")
    
    return model_results

def add_single_face(image_base64: str, person_id: str, person_name: str, model_name: str) -> bool:
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    url = f"{API_BASE_URL}/api/face-recognition/add-face-json"
    
    data = {
        "person_id": person_id,
        "person_name": person_name,
        "face_image_base64": image_base64,
        "model_name": model_name
    }
    
    try:
        response = requests.post(url, json=data, timeout=120)
        if response.status_code == 200:
            result = response.json()
            return result.get('success', False)
        else:
            logger.error(f"‚ùå Registration failed for {model_name}: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Registration exception for {model_name}: {e}")
        return False

def get_all_test_images() -> List[str]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô test_images"""
    if not os.path.exists(TEST_IMAGES_DIR):
        logger.error(f"‚ùå Test images directory not found: {TEST_IMAGES_DIR}")
        return []
    
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
    test_images = []
    
    for file in os.listdir(TEST_IMAGES_DIR):
        if os.path.splitext(file.lower())[1] in image_extensions:
            test_images.append(file)
    
    test_images.sort()
    logger.info(f"üìÅ Found {len(test_images)} test images")
    
    return test_images

def detect_faces_in_image(image_base64: str) -> List[Dict[str, Any]]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û - ‡πÄ‡∏û‡∏¥‡πà‡∏° retry ‡πÅ‡∏•‡∏∞ timeout ‡∏ó‡∏µ‡πà‡∏ô‡∏≤‡∏ô"""
    url = f"{API_BASE_URL}/api/face-detection/detect-base64"
    
    data = {
        "face_image_base64": image_base64,
        "model_name": "auto",
        "conf_threshold": 0.5,
        "iou_threshold": 0.4,
        "max_faces": 10
    }
    
    # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤ timeout
    for attempt in range(3):
        try:
            logger.info(f"    üîç Face detection attempt {attempt + 1}/3")
            response = requests.post(url, json=data, timeout=60)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if response.status_code == 200:
                result = response.json()
                faces = result.get("faces", [])
                logger.info(f"    ‚úÖ Detected {len(faces)} faces")
                return faces
            else:
                logger.warning(f"    ‚ö†Ô∏è Face detection failed: {response.status_code}")
                if attempt < 2:  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà attempt ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    continue
        except Exception as e:
            logger.warning(f"    ‚ö†Ô∏è Face detection error (attempt {attempt + 1}): {e}")
            if attempt < 2:  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà attempt ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                continue
    
    logger.error(f"    ‚ùå Face detection failed after 3 attempts")
    return []

def recognize_face_all_models(image_base64: str) -> Dict[str, Any]:
    """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ internal database"""
    results = {}
    
    logger.info("    üóÑÔ∏è Using internal database for recognition")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    for model_name in ALL_MODELS:
        try:
            logger.info(f"    üß† Testing {model_name}")
            
            result = recognize_single_model(image_base64, model_name)
            results[model_name] = result
            
            # Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if result.get("matches"):
                best_match = result["matches"][0]
                similarity = best_match.get("similarity", best_match.get("confidence", 0))
                person_name = best_match.get("person_name", "unknown")
                logger.info(f"      ‚úÖ {model_name}: {person_name} ({similarity:.3f})")
            else:
                logger.info(f"      ‚ùå {model_name}: No matches found")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
            time.sleep(0.5)
                
        except Exception as e:
            logger.error(f"‚ùå Recognition failed for {model_name}: {e}")
            results[model_name] = {"matches": [], "error": str(e)}
    
    return results

def recognize_single_model(image_base64: str, model_name: str) -> Dict[str, Any]:
    """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ internal database - ‡πÄ‡∏û‡∏¥‡πà‡∏° retry ‡πÅ‡∏•‡∏∞ timeout"""
    url = f"{API_BASE_URL}/api/face-recognition/recognize"
    
    data = {
        "face_image_base64": image_base64,
        "model_name": model_name,
        "top_k": 5,
        "similarity_threshold": 0.3
        # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á gallery ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ API ‡πÉ‡∏ä‡πâ internal database
    }
    
    # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤ timeout
    for attempt in range(2):  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        try:
            logger.info(f"      üîÑ Recognition attempt {attempt + 1}/2 for {model_name}")
            response = requests.post(url, json=data, timeout=180)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ
            if response.status_code == 200:
                result = response.json()
                if result.get("matches"):
                    logger.info(f"      ‚úÖ {model_name} success")
                else:
                    logger.info(f"      ‚ö™ {model_name} no matches")
                return result
            else:
                error_text = response.text[:200] if response.text else "No error message"
                logger.warning(f"      ‚ö†Ô∏è {model_name} failed: {response.status_code}")
                if attempt < 1:  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà attempt ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    time.sleep(10)  # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    continue
        except Exception as e:
            logger.warning(f"      ‚ö†Ô∏è {model_name} error (attempt {attempt + 1}): {str(e)[:100]}")
            if attempt < 1:  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà attempt ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                time.sleep(10)  # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                continue
    
    logger.error(f"      ‚ùå {model_name} failed after 2 attempts")
    return {"matches": [], "error": f"Failed after 2 attempts"}

def create_ensemble_prediction(model_results: Dict[str, Any]) -> Dict[str, Any]:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Ensemble"""
    if not model_results:
        return {"matches": [], "method": "ensemble"}
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    person_scores = defaultdict(list)
    
    for model_name, result in model_results.items():
        if "matches" in result and result["matches"]:
            weight = ENSEMBLE_WEIGHTS.get(model_name, 0)
            
            for match in result["matches"]:
                person_name = match.get("person_name", "")
                similarity = match.get("similarity", match.get("confidence", 0))
                weighted_score = similarity * weight
                
                person_scores[person_name].append({
                    "model": model_name,
                    "similarity": similarity,
                    "weighted_score": weighted_score,
                    "weight": weight
                })
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    ensemble_matches = []
    for person_name, scores in person_scores.items():
        total_weighted_score = sum(score["weighted_score"] for score in scores)
        avg_similarity = sum(score["similarity"] for score in scores) / len(scores)
        
        ensemble_matches.append({
            "person_name": person_name,
            "similarity": total_weighted_score,
            "confidence": total_weighted_score,
            "average_similarity": avg_similarity,
            "model_count": len(scores),
            "contributing_models": [score["model"] for score in scores]
        })
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    ensemble_matches.sort(key=lambda x: x["similarity"], reverse=True)
    
    return {
        "matches": ensemble_matches,
        "method": "ensemble",
        "total_models": len(model_results),
        "contributing_models": len([m for m in model_results.values() if m.get("matches")])
    }

def draw_results_on_image(image_path: str, faces: List[Dict], 
                         recognition_results: Dict[str, Any], model_name: str) -> str:
    """‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û
        image = cv2.imread(image_path)
        if image is None:
            logger.error(f"‚ùå Cannot read image: {image_path}")
            return ""
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        for i, face in enumerate(faces):
            bbox = face.get("bbox", {})
            x1, y1 = int(bbox.get("x1", 0)), int(bbox.get("y1", 0))
            x2, y2 = int(bbox.get("x2", 0)), int(bbox.get("y2", 0))
            confidence = face.get("confidence", 0)
            
            # ‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
            color = (0, 255, 0)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
            cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
            
            # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            face_text = f"Face {i+1} ({confidence:.2f})"
            cv2.putText(image, face_text, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result_text = f"Model: {model_name}"
        if recognition_results.get("matches"):
            best_match = recognition_results["matches"][0]
            person_name = best_match.get("person_name", "unknown")
            similarity = best_match.get("similarity", best_match.get("confidence", 0))
            result_text += f" | Best: {person_name} ({similarity:.3f})"
        else:
            result_text += " | No matches"
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        cv2.putText(image, result_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
        output_path = os.path.join(OUTPUT_DIR, model_name, os.path.basename(image_path))
        cv2.imwrite(output_path, image)
        
        return output_path
        
    except Exception as e:
        logger.error(f"‚ùå Error drawing results: {e}")
        return ""

def warm_up_models():
    """Warm up models ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å model ‡∏Å‡πà‡∏≠‡∏ô"""
    logger.info("üî• Warming up models...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dummy image ‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö warm up
    dummy_image = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwCdABmX/9k="
    
    for model_name in ALL_MODELS:
        try:
            logger.info(f"  üî• Warming up {model_name}...")
            url = f"{API_BASE_URL}/api/face-recognition/recognize"
            data = {
                "face_image_base64": dummy_image,
                "model_name": model_name,
                "top_k": 1,
                "similarity_threshold": 0.9
            }
            response = requests.post(url, json=data, timeout=60)
            if response.status_code == 200:
                logger.info(f"    ‚úÖ {model_name} warmed up")
            else:
                logger.warning(f"    ‚ö†Ô∏è {model_name} warm up failed: {response.status_code}")
            time.sleep(2)  # ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á models
        except Exception as e:
            logger.warning(f"    ‚ö†Ô∏è {model_name} warm up error: {e}")
    
    logger.info("üî• Model warm up completed")

def run_real_world_test():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á"""
    logger.info("üöÄ Real-world Face Recognition Test - Improved Version")
    logger.info("=" * 70)
    
    ensure_output_dir()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API
    try:
        health_response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if health_response.status_code != 200:
            logger.error("‚ùå API server not responding")
            return
    except Exception as e:
        logger.error(f"‚ùå Cannot connect to API: {e}")
        return
      # 1. ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    logger.info("\nüßπ Step 1: Clearing database...")
    if not clear_database():
        logger.error("‚ùå Failed to clear database")
        return
    
    # 1.5 Warm up models
    logger.info("\nüî• Step 1.5: Warming up models...")
    warm_up_models()
    
    # 2. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    logger.info("\nüë• Step 2: Registering users...")
    registration_results = {}
    
    for user_id, image_files in USERS.items():
        result = register_user_all_models(user_id, image_files)
        registration_results[user_id] = result
        time.sleep(2)  # ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á users
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    logger.info("\nüìä Registration Summary:")
    for user_id, results in registration_results.items():
        logger.info(f"  üë§ {user_id}:")
        for model_name, success_count in results.items():
            logger.info(f"    üß† {model_name}: {success_count}/10 images")
      # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥ (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î timeout)
    logger.info("\nüîç Step 3: Testing recognition...")
    test_images = get_all_test_images()
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    important_images = []
    for img in test_images:
        if any(keyword in img.lower() for keyword in ['boss_01', 'boss_02', 'night_01', 'night_02', 'group']):
            important_images.append(img)
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å‡πÜ
    if not important_images:
        important_images = test_images[:10]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà 10 ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å
    
    logger.info(f"üì∏ Selected {len(important_images)} important images from {len(test_images)} total images")
    
    all_results = {}    
    for i, image_file in enumerate(important_images, 1):
        logger.info(f"\nüì∏ [{i}/{len(important_images)}] Processing: {image_file}")
        
        image_path = os.path.join(TEST_IMAGES_DIR, image_file)
        image_base64 = image_to_base64(image_path)
        
        # 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        faces = detect_faces_in_image(image_base64)
        logger.info(f"  üë• Detected {len(faces)} faces")
        
        # 3.2 ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
        recognition_results = recognize_face_all_models(image_base64)
        
        # 3.3 ‡∏™‡∏£‡πâ‡∏≤‡∏á Ensemble prediction
        ensemble_result = create_ensemble_prediction(recognition_results)
        recognition_results["ensemble"] = ensemble_result
        
        # 3.4 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        all_results[image_file] = {
            "faces": faces,
            "recognition_results": recognition_results,
            "image_path": image_path
        }
        
        # 3.5 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        for model_name, result in recognition_results.items():
            output_path = draw_results_on_image(image_path, faces, result, model_name)
            if output_path:
                logger.info(f"    üíæ Saved: {os.path.basename(output_path)}")
        
        # ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        time.sleep(2)
    
    # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    logger.info("\nüìã Step 4: Generating report...")
    generate_final_report(all_results)
    
    logger.info("\n‚úÖ Real-world test completed!")
    logger.info(f"üìÅ Results saved in: {OUTPUT_DIR}")

def generate_final_report(results: Dict[str, Any]):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•"""
    report = {
        "test_timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
        "total_images_processed": len(results),
        "models_tested": ALL_MODELS + ["ensemble"],
        "ensemble_weights": ENSEMBLE_WEIGHTS,
        "results_summary": {},
        "detailed_results": {}
    }
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_stats = {}
    for model_name in ALL_MODELS + ["ensemble"]:
        matches_found = 0
        total_similarity = 0
        person_counts = defaultdict(int)
        
        for image_file, data in results.items():
            recognition_result = data["recognition_results"].get(model_name, {})
            if recognition_result.get("matches"):
                matches_found += 1
                best_match = recognition_result["matches"][0]
                similarity = best_match.get("similarity", best_match.get("confidence", 0))
                total_similarity += similarity
                
                person_name = best_match.get("person_name", "unknown")
                person_counts[person_name] += 1
        
        model_stats[model_name] = {
            "matches_found": matches_found,
            "match_rate": (matches_found / len(results)) * 100,
            "average_similarity": (total_similarity / matches_found) if matches_found > 0 else 0,
            "person_distribution": dict(person_counts)
        }
    
    report["results_summary"] = model_stats
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    report_path = os.path.join(OUTPUT_DIR, "test_report.json")
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    logger.info(f"üìÑ Report saved: {report_path}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
    print_final_summary(model_stats)

def print_final_summary(stats: Dict[str, Any]):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("\n" + "="*80)
    print("üìä REAL-WORLD FACE RECOGNITION TEST RESULTS - IMPROVED")
    print("="*80)
    print(f"üß† Models tested: {len(ALL_MODELS)} models + ensemble")
    print("üë• Users: boss, night (10 images each)")
    print("üì∏ Test images: Multiple processed")
    print("‚öñÔ∏è Ensemble: Weighted average from all models")
    print("\n" + "-"*80)
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° match rate
    sorted_models = sorted(stats.items(), key=lambda x: x[1]["match_rate"], reverse=True)
    
    for model_name, data in sorted_models:
        match_rate = data["match_rate"]
        avg_similarity = data["average_similarity"]
        matches_found = data["matches_found"]
        person_dist = data["person_distribution"]
        
        status = "üü¢" if match_rate >= 80 else "üü°" if match_rate >= 50 else "üî¥"
        
        print(f"{status} {model_name:15} | {match_rate:5.1f}% | {avg_similarity:.3f} | {matches_found:3d} matches")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á person
        if person_dist:
            person_summary = ", ".join([f"{name}: {count}" for name, count in person_dist.items()])
            print(f"   üìä Distribution: {person_summary}")
    
    print("\n" + "="*80)

if __name__ == "__main__":
    run_real_world_test()
